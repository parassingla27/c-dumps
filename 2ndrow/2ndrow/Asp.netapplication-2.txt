What are the implications of inheriting the code-behind page from a Page class in an ASP.NET application?
1.Inheriting from the Page class gives the code-behind page access to the HTML elements in the web page
2.Inheriting from the Page class gives the code-behind page access to the ASP.NET intrinsic objects, such as Request and Response
3.Inheriting from the Page class provides a framework for handling events for controls within the ASP.NET page
4.Inheriting from the Page class provides a framework for handling application configuration issues



1&2&3  




2&3  ***********




2&4  




1&3&4  













What does the following code denote?
<%@ Page Language="C#" Inherits="MyStuff.MyClass" %>
<HTML>
    <body>
        <form id="MyForm" runat="server">
        <asp:textbox id="MyTextBox" text="Hello World" runat="server"></asp:textbox>
        <asp:button id="MyButton" text="Echo Input" Onclick="MyButton_Click" runat="server"></asp:button>
        <asp:label id="MyLabel" runat="server" />
        </form>
    </body>
</HTML>
 







It denotes a code-behind page  




It denotes a config file  




It denotes an aspx page  **************




It denotes a header file  

How do you implement code behind?
1.All the user interface related code is written in a .aspx file
2.All the user interface related code is written in a .cs or .vb file
3.All the business logic is written in a .cs or .vb file
4.All the business logic is written in a .aspx file
 







1&3  *************




3&4  




2&3&4  




1&2  


How do you separate ASP.NET code from the user interface?
 







Using Custom Controls  




Using ASP.NET web pages  




Using User Controls  




Using Code-Behind forms  ************



What all happens before & during the Rendering stage of the page life cycle?
1.Page load event is triggered
2.View state is saved for the page and all controls
3.Control properties are loaded with information recovered from view state and control state
4.The Render method for each control is called by the page
 







1&3  




3&4  




2&4  ***********




1&2&3  




What does the following code denote?
using System;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace MyStuff
{
    public class MyClass : Page
    {
        protected System.Web.UI.WebControls.Label MyLabel;
        protected System.Web.UI.WebControls.Button MyButton;
        protected System.Web.UI.WebControls.TextBox MyTextBox;

        public void MyButton_Click(Object sender, EventArgs e)
        {
            MyLabel.Text = MyTextBox.Text.ToString();
        }
    }
}
 







It denotes a header file  




It denotes an aspx page  




It denotes a code-behind page  **********




It denotes a user control  


Which event is raised after the page loads view state for itself and all controls, and after it processes postback data that is included with the Request instance?
 







Init  




InitComplete  




PreLoad  **********




PreInit  


Carefully read the question and answer accordingly.Which event is raised at the end of the event-handling stage of the page life cycle?
 







LoadComplete  **********




InitComplete  




Unload  




Init  

Which statements are true about the unload event of the page life cycle?
1.Event is raised before the page has been fully rendered, sent to the client, and is ready to be discarded
2.Event is raised after the page has been fully rendered, sent to the client, and is ready to be discarded
3.Page properties such as Response & Request are unloaded
4.Cleanup is performed
 







2&3&4  ****************




1&4  




1&2&4  




2&3  




Carefully read the question and answer accordingly.How is the Postback event handling done during a page life cycle?
1.Control event handlers are called
2.Page Load event is triggered
3.The Validate method of all validator controls is called
4.The IsValid property of individual validator controls is set
 







2&4  




1&3&4  ************




2&3&4  




1&3  



