Which all statements are true for static methods?
1.Static methods do not depend on any object state
2.Static methods depend on an object state
3.Static methods eliminate the overhead of creating an object instance
4.Static methods are same as public methods
 







1&3  ---




3&4  




1&2&4  




2&3  



Which of the following statements are true for Protected Access?
1.Protected members can be accessed by all the code
2.Protected members can be accessed only by members of the same class or through inheritance
3.Protected access is less restrictive than private access but more restrictive than public access
4.Protected access is more restrictive than private access but less restrictive than public access
 







2&3  ----




2&4  




1&4  




1&2&4  



What are your observations on the following code?
sealed class PatientStats
{
 public bool Gender { get; set; }
 public int NumberOfVisits { get; set; }
 public string Name { get; set; }
}

class Patient
{
 public PatientStats Stats { get; set; }
}
1.It is an example of inheritance
2.It is an example of polymorphism
3.It is an example of sealed class
4.One class is used as an encapsulated object in another class
 







3&4  ----




1&3&4  




1&2  




2&4  



What are your observations about the following code?
class Contact
{
 public string FullAddress()
 {
   // some code
 }
}

class WebSite
{
 // members
}

public class SiteOwner : Contact
{
 WebSite mySite = new WebSite();
 public new string FullAddress()
 {
  string fullAddress = mySite.ToString();
  // create an address...
  return fullAddress;
 }
}
1.It denotes Inheritance
2.It denotes Encapsulation
3.It denotes Versioning
4.It denotes Overriding
 







1&2  




2&4  




1&3&4  




1&3  ----




What you have understood from the following code? class Test: Form { } 
 







Creates the class Test : Form  




Creates the class Test that inherits the class Form  -----




Creates the class form that inherits the class Test  




All of the listed options  


What does the following code denote?

public class Contact
{
  public string Name { get; set; }
  public string Email { get; set; }
  public string Address { get; set; }
 public string City { get; set; }

 protected string FullAddress()
 {
  return Address + ‘ ’ + City;
 }
}

class Customer : Contact
{
  public string FullAddress()
 {
  string fullAddress = ““;
  // Some statements

  return fullAddress;
 }
}
1.It is an example of inheritance
2.It shows how a method in base class can be used in the derived class
3.It shows how a method in base class is hidden from the user
4.It shows how polymorphism is implemented
 







1&2  




1&3 ---- 




1&3&4  




2&4  



How can you call Base class members from a derived class?
1.By declaring them as private
2.By declaring them as public
3.By declaring them as protected
4.By declaring them as static
 







3&4  




1&2  




1&4  




2&3  ----



What does the following code denote?

public class Contact
{
  public string Name { get; set; }
  public string Email { get; set; }
  public string Address { get; set; }
 public string City { get; set; }

 protected string FullAddress()
 {
  return Address + ‘ ’ + City;
 }
}

class Customer : Contact
{
  public string GetAddressDetails()
 {
  
  string fullAddress = FullAddress();
  // Some statements

  return fullAddress;
 }
}
1.It is an example of polymorphism
2.It shows how a method in base class can be used in the derived class
3.It shows how a method in base class is hidden from the user
4.It is an example of inheritance
 







2&4  ----




1&3  




1&2&3  




1&2&4  



Which statements are true about the following code?

class Contact
{
 protected internal bool Active { get; set; }
}

sealed class CustomerStats:Contact
{
 internal bool Gender { get; set; }
 internal decimal Income { get; set; }
 internal int NumberOfVisits { get; set; }
}
1.Objects in the same assembly have access to the protected internal member Active
2.Derived classes inside the assembly have access to protected internal member Active
3.Derived classes outside the assembly have access to protected internal member Active
4.Derived classes do not have access to protected internal members
 







1&3&4  




1&2&3  ----




1&3  




2&4  



What does the following code denote?

public class Contact
{
 public string Name { get; set; }
 public string Email { get; set; }
 public string Address { get; set; }
}

class Customer : Contact
{
 public string Gender { get; set; }
 public decimal Income { get; set; }
}

 







Inheritance  ----




Encapsulation  




Overriding  




Overloading  

















